#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
# define INF 9999
typedef struct{
int u, v, weight;
}Edge;

int compare(const void* a, const void *b){
	Edge* e1 = (Edge*)a;
	Edge* e2 = (Edge*)b;
	if(e1->weight != e2->weight)
		return e1->weight - e2->weight;
	else if(e1->u != e2->u)
		return e1->u - e1->u;
	else
		return e1->v - e2->v;
}
int find(int parent[], int i) {
	if(parent[i]==i)
		return i;
	return parent[i]=find(parent, parent[i]);
}
void unionSets(int parent[],int x, int y) {
	int xroot = find(parent,x);
	int yroot = find(parent, y);
	parent[yroot] = xroot;
}
void kruskalMST(int **cost, int V) {
	Edge edges[V*V];
	int edgeCount = 0;
	for(int i =0; i<V; i++){
		for(int j = i+1; j<V;j++){
			if(cost[i][j] != INF){
				edges[edgeCount].u = (i<j) ? i:j;
				edges[edgeCount].v = (i<j) ? j:i;
				edges[edgeCount].weight = cost[i][j];
				edgeCount++;
			}
		}
	}
	qsort(edges, edgeCount, sizeof(Edge), compare);
	int parent[V];
	for(int i=0;i<V;i++){
		parent[i] = i;
	}
	int totalCost = 0;
	int mstEdges = 0;
	for(int i=0;i<edgeCount&&mstEdges<V-1;i++){
		int u = edges[i].u;
		int v = edges[i].v;
		int setU = find(parent,u);
		int setV = find(parent,v);
		if(setU != setV){
			printf("Edge %d:(%d, %d) cost:%d\n",mstEdges, u,v,edges[i].weight);
			totalCost += edges[i].weight;
			unionSets(parent,setU,setV);
			mstEdges++;
		}
	}
	printf("Minimum cost= %d\n",totalCost);
}
int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
