#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
#define V 100

int minKey(int key[], bool mstSet[], int vertices) {
	// Write your code here...
	int min = INT_MAX, min_index;
	for(int i=0;i<vertices;i++){
		if(!mstSet[i] && key[i]<min){
			min = key[i]; 
			min_index = i;
		}
	}
	return min_index;



}
void printTree(int parent[], int graph[V][V], int vertices) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < vertices; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

void prim(int graph[V][V], int vertices) {
	// Write your code here...
	int p[V];
	int key[V];
	bool mstSet[V];
	for(int i = 0;i<vertices; i++){
		key[i] = INT_MAX;
		mstSet[i] = false;
	}
	key[0] = 0;
	p[0] = -1;
	for(int j=0;j<vertices-1;j++){
		int u = minKey(key,mstSet,vertices);
		mstSet[u] = true;
	for(int k=0; k<vertices;k++){
		if(graph[u][k] && !mstSet[k] && graph[u][k]<key[k]){
			p[k] = u;
			key[k]=graph[u][k];
		}
	}
}
	printTree(p, graph, vertices);
}

int main() {
    int vertices;
    int graph[V][V];

    printf("No of vertices: ");
    scanf("%d", &vertices);

    printf("Adjacency matrix elements (row wise):\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    prim(graph, vertices);

    return 0;
}
